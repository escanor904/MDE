/**
 */
package concretemodel.provider;

import concretemodel.util.ConcretemodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConcretemodelItemProviderAdapterFactory extends ConcretemodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConcretemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ModelFactoryConcrete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryConcreteItemProvider modelFactoryConcreteItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ModelFactoryConcrete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryConcreteAdapter() {
		if (modelFactoryConcreteItemProvider == null) {
			modelFactoryConcreteItemProvider = new ModelFactoryConcreteItemProvider(this);
		}

		return modelFactoryConcreteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ProjectAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectAdjItemProvider projectAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ProjectAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdjAdapter() {
		if (projectAdjItemProvider == null) {
			projectAdjItemProvider = new ProjectAdjItemProvider(this);
		}

		return projectAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ClassDiagramAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDiagramAdjItemProvider classDiagramAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ClassDiagramAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDiagramAdjAdapter() {
		if (classDiagramAdjItemProvider == null) {
			classDiagramAdjItemProvider = new ClassDiagramAdjItemProvider(this);
		}

		return classDiagramAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.PackageConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageConcreteAdjItemProvider packageConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.PackageConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageConcreteAdjAdapter() {
		if (packageConcreteAdjItemProvider == null) {
			packageConcreteAdjItemProvider = new PackageConcreteAdjItemProvider(this);
		}

		return packageConcreteAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ContainmentSdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainmentSdjItemProvider containmentSdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ContainmentSdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainmentSdjAdapter() {
		if (containmentSdjItemProvider == null) {
			containmentSdjItemProvider = new ContainmentSdjItemProvider(this);
		}

		return containmentSdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.SharingAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharingAdjItemProvider sharingAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.SharingAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharingAdjAdapter() {
		if (sharingAdjItemProvider == null) {
			sharingAdjItemProvider = new SharingAdjItemProvider(this);
		}

		return sharingAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.AssociationAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationAdjItemProvider associationAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.AssociationAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdjAdapter() {
		if (associationAdjItemProvider == null) {
			associationAdjItemProvider = new AssociationAdjItemProvider(this);
		}

		return associationAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.GeneralizationAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationAdjItemProvider generalizationAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.GeneralizationAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdjAdapter() {
		if (generalizationAdjItemProvider == null) {
			generalizationAdjItemProvider = new GeneralizationAdjItemProvider(this);
		}

		return generalizationAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ClassConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassConcreteAdjItemProvider classConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ClassConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassConcreteAdjAdapter() {
		if (classConcreteAdjItemProvider == null) {
			classConcreteAdjItemProvider = new ClassConcreteAdjItemProvider(this);
		}

		return classConcreteAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.MethodConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodConcreteAdjItemProvider methodConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.MethodConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodConcreteAdjAdapter() {
		if (methodConcreteAdjItemProvider == null) {
			methodConcreteAdjItemProvider = new MethodConcreteAdjItemProvider(this);
		}

		return methodConcreteAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.ParameterConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterConcreteAdjItemProvider parameterConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.ParameterConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterConcreteAdjAdapter() {
		if (parameterConcreteAdjItemProvider == null) {
			parameterConcreteAdjItemProvider = new ParameterConcreteAdjItemProvider(this);
		}

		return parameterConcreteAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.AttributeTypeConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeConcreteAdjItemProvider attributeTypeConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.AttributeTypeConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeConcreteAdjAdapter() {
		if (attributeTypeConcreteAdjItemProvider == null) {
			attributeTypeConcreteAdjItemProvider = new AttributeTypeConcreteAdjItemProvider(this);
		}

		return attributeTypeConcreteAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concretemodel.AttributeConcreteAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeConcreteAdjItemProvider attributeConcreteAdjItemProvider;

	/**
	 * This creates an adapter for a {@link concretemodel.AttributeConcreteAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeConcreteAdjAdapter() {
		if (attributeConcreteAdjItemProvider == null) {
			attributeConcreteAdjItemProvider = new AttributeConcreteAdjItemProvider(this);
		}

		return attributeConcreteAdjItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryConcreteItemProvider != null) modelFactoryConcreteItemProvider.dispose();
		if (projectAdjItemProvider != null) projectAdjItemProvider.dispose();
		if (classDiagramAdjItemProvider != null) classDiagramAdjItemProvider.dispose();
		if (packageConcreteAdjItemProvider != null) packageConcreteAdjItemProvider.dispose();
		if (containmentSdjItemProvider != null) containmentSdjItemProvider.dispose();
		if (sharingAdjItemProvider != null) sharingAdjItemProvider.dispose();
		if (associationAdjItemProvider != null) associationAdjItemProvider.dispose();
		if (generalizationAdjItemProvider != null) generalizationAdjItemProvider.dispose();
		if (classConcreteAdjItemProvider != null) classConcreteAdjItemProvider.dispose();
		if (methodConcreteAdjItemProvider != null) methodConcreteAdjItemProvider.dispose();
		if (parameterConcreteAdjItemProvider != null) parameterConcreteAdjItemProvider.dispose();
		if (attributeTypeConcreteAdjItemProvider != null) attributeTypeConcreteAdjItemProvider.dispose();
		if (attributeConcreteAdjItemProvider != null) attributeConcreteAdjItemProvider.dispose();
	}

}
