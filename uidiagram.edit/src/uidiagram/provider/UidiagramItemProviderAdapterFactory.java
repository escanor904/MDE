/**
 */
package uidiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uidiagram.util.UidiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UidiagramItemProviderAdapterFactory extends UidiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UidiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.ModelFactoryUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryUIItemProvider modelFactoryUIItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.ModelFactoryUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryUIAdapter() {
		if (modelFactoryUIItemProvider == null) {
			modelFactoryUIItemProvider = new ModelFactoryUIItemProvider(this);
		}

		return modelFactoryUIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.ProjectUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectUIItemProvider projectUIItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.ProjectUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectUIAdapter() {
		if (projectUIItemProvider == null) {
			projectUIItemProvider = new ProjectUIItemProvider(this);
		}

		return projectUIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.UIDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIDiagramItemProvider uiDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.UIDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIDiagramAdapter() {
		if (uiDiagramItemProvider == null) {
			uiDiagramItemProvider = new UIDiagramItemProvider(this);
		}

		return uiDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.FormUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormUIItemProvider formUIItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.FormUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormUIAdapter() {
		if (formUIItemProvider == null) {
			formUIItemProvider = new FormUIItemProvider(this);
		}

		return formUIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjLabelItemProvider adjLabelItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjLabelAdapter() {
		if (adjLabelItemProvider == null) {
			adjLabelItemProvider = new AdjLabelItemProvider(this);
		}

		return adjLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjCheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjCheckBoxItemProvider adjCheckBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjCheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjCheckBoxAdapter() {
		if (adjCheckBoxItemProvider == null) {
			adjCheckBoxItemProvider = new AdjCheckBoxItemProvider(this);
		}

		return adjCheckBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjButtonItemProvider adjButtonItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjButtonAdapter() {
		if (adjButtonItemProvider == null) {
			adjButtonItemProvider = new AdjButtonItemProvider(this);
		}

		return adjButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjListBoxItemProvider adjListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjListBoxAdapter() {
		if (adjListBoxItemProvider == null) {
			adjListBoxItemProvider = new AdjListBoxItemProvider(this);
		}

		return adjListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjDatepicker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjDatepickerItemProvider adjDatepickerItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjDatepicker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjDatepickerAdapter() {
		if (adjDatepickerItemProvider == null) {
			adjDatepickerItemProvider = new AdjDatepickerItemProvider(this);
		}

		return adjDatepickerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjTextBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjTextBoxItemProvider adjTextBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjTextBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjTextBoxAdapter() {
		if (adjTextBoxItemProvider == null) {
			adjTextBoxItemProvider = new AdjTextBoxItemProvider(this);
		}

		return adjTextBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjCheckedListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjCheckedListBoxItemProvider adjCheckedListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjCheckedListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjCheckedListBoxAdapter() {
		if (adjCheckedListBoxItemProvider == null) {
			adjCheckedListBoxItemProvider = new AdjCheckedListBoxItemProvider(this);
		}

		return adjCheckedListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjLinkLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjLinkLabelItemProvider adjLinkLabelItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjLinkLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjLinkLabelAdapter() {
		if (adjLinkLabelItemProvider == null) {
			adjLinkLabelItemProvider = new AdjLinkLabelItemProvider(this);
		}

		return adjLinkLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjRichTextBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjRichTextBoxItemProvider adjRichTextBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjRichTextBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjRichTextBoxAdapter() {
		if (adjRichTextBoxItemProvider == null) {
			adjRichTextBoxItemProvider = new AdjRichTextBoxItemProvider(this);
		}

		return adjRichTextBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjTreeViewItemProvider adjTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjTreeViewAdapter() {
		if (adjTreeViewItemProvider == null) {
			adjTreeViewItemProvider = new AdjTreeViewItemProvider(this);
		}

		return adjTreeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjPropertyGrid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjPropertyGridItemProvider adjPropertyGridItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjPropertyGrid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjPropertyGridAdapter() {
		if (adjPropertyGridItemProvider == null) {
			adjPropertyGridItemProvider = new AdjPropertyGridItemProvider(this);
		}

		return adjPropertyGridItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjProgressBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjProgressBarItemProvider adjProgressBarItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjProgressBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjProgressBarAdapter() {
		if (adjProgressBarItemProvider == null) {
			adjProgressBarItemProvider = new AdjProgressBarItemProvider(this);
		}

		return adjProgressBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjDataGridView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjDataGridViewItemProvider adjDataGridViewItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjDataGridView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjDataGridViewAdapter() {
		if (adjDataGridViewItemProvider == null) {
			adjDataGridViewItemProvider = new AdjDataGridViewItemProvider(this);
		}

		return adjDataGridViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjDataGridViewTextBoxColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjDataGridViewTextBoxColumnItemProvider adjDataGridViewTextBoxColumnItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjDataGridViewTextBoxColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjDataGridViewTextBoxColumnAdapter() {
		if (adjDataGridViewTextBoxColumnItemProvider == null) {
			adjDataGridViewTextBoxColumnItemProvider = new AdjDataGridViewTextBoxColumnItemProvider(this);
		}

		return adjDataGridViewTextBoxColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjPanelItemProvider adjPanelItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjPanelAdapter() {
		if (adjPanelItemProvider == null) {
			adjPanelItemProvider = new AdjPanelItemProvider(this);
		}

		return adjPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjGroupBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjGroupBoxItemProvider adjGroupBoxItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjGroupBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjGroupBoxAdapter() {
		if (adjGroupBoxItemProvider == null) {
			adjGroupBoxItemProvider = new AdjGroupBoxItemProvider(this);
		}

		return adjGroupBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjMenuStrip} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjMenuStripItemProvider adjMenuStripItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjMenuStrip}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjMenuStripAdapter() {
		if (adjMenuStripItemProvider == null) {
			adjMenuStripItemProvider = new AdjMenuStripItemProvider(this);
		}

		return adjMenuStripItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uidiagram.AdjToolStrip} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdjToolStripItemProvider adjToolStripItemProvider;

	/**
	 * This creates an adapter for a {@link uidiagram.AdjToolStrip}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdjToolStripAdapter() {
		if (adjToolStripItemProvider == null) {
			adjToolStripItemProvider = new AdjToolStripItemProvider(this);
		}

		return adjToolStripItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryUIItemProvider != null) modelFactoryUIItemProvider.dispose();
		if (projectUIItemProvider != null) projectUIItemProvider.dispose();
		if (uiDiagramItemProvider != null) uiDiagramItemProvider.dispose();
		if (formUIItemProvider != null) formUIItemProvider.dispose();
		if (adjLabelItemProvider != null) adjLabelItemProvider.dispose();
		if (adjCheckBoxItemProvider != null) adjCheckBoxItemProvider.dispose();
		if (adjButtonItemProvider != null) adjButtonItemProvider.dispose();
		if (adjListBoxItemProvider != null) adjListBoxItemProvider.dispose();
		if (adjDatepickerItemProvider != null) adjDatepickerItemProvider.dispose();
		if (adjTextBoxItemProvider != null) adjTextBoxItemProvider.dispose();
		if (adjCheckedListBoxItemProvider != null) adjCheckedListBoxItemProvider.dispose();
		if (adjLinkLabelItemProvider != null) adjLinkLabelItemProvider.dispose();
		if (adjRichTextBoxItemProvider != null) adjRichTextBoxItemProvider.dispose();
		if (adjTreeViewItemProvider != null) adjTreeViewItemProvider.dispose();
		if (adjPropertyGridItemProvider != null) adjPropertyGridItemProvider.dispose();
		if (adjProgressBarItemProvider != null) adjProgressBarItemProvider.dispose();
		if (adjDataGridViewItemProvider != null) adjDataGridViewItemProvider.dispose();
		if (adjDataGridViewTextBoxColumnItemProvider != null) adjDataGridViewTextBoxColumnItemProvider.dispose();
		if (adjPanelItemProvider != null) adjPanelItemProvider.dispose();
		if (adjGroupBoxItemProvider != null) adjGroupBoxItemProvider.dispose();
		if (adjMenuStripItemProvider != null) adjMenuStripItemProvider.dispose();
		if (adjToolStripItemProvider != null) adjToolStripItemProvider.dispose();
	}

}
