/**
 */
package abstractmodel.provider;

import abstractmodel.util.AbstractmodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AbstractmodelItemProviderAdapterFactory extends AbstractmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ModelFactoryAbstract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryAbstractItemProvider modelFactoryAbstractItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ModelFactoryAbstract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryAbstractAdapter() {
		if (modelFactoryAbstractItemProvider == null) {
			modelFactoryAbstractItemProvider = new ModelFactoryAbstractItemProvider(this);
		}

		return modelFactoryAbstractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ProjectAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectAdjItemProvider projectAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ProjectAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdjAdapter() {
		if (projectAdjItemProvider == null) {
			projectAdjItemProvider = new ProjectAdjItemProvider(this);
		}

		return projectAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ClassTypeFactoryAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassTypeFactoryAdjItemProvider classTypeFactoryAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ClassTypeFactoryAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassTypeFactoryAdjAdapter() {
		if (classTypeFactoryAdjItemProvider == null) {
			classTypeFactoryAdjItemProvider = new ClassTypeFactoryAdjItemProvider(this);
		}

		return classTypeFactoryAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ClassTypeAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassTypeAdjItemProvider classTypeAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ClassTypeAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassTypeAdjAdapter() {
		if (classTypeAdjItemProvider == null) {
			classTypeAdjItemProvider = new ClassTypeAdjItemProvider(this);
		}

		return classTypeAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.AttributeTypeFactoryAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeFactoryAdjItemProvider attributeTypeFactoryAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.AttributeTypeFactoryAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeFactoryAdjAdapter() {
		if (attributeTypeFactoryAdjItemProvider == null) {
			attributeTypeFactoryAdjItemProvider = new AttributeTypeFactoryAdjItemProvider(this);
		}

		return attributeTypeFactoryAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.AttributeTypeAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeAdjItemProvider attributeTypeAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.AttributeTypeAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdjAdapter() {
		if (attributeTypeAdjItemProvider == null) {
			attributeTypeAdjItemProvider = new AttributeTypeAdjItemProvider(this);
		}

		return attributeTypeAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.PackageAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageAdjItemProvider packageAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.PackageAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageAdjAdapter() {
		if (packageAdjItemProvider == null) {
			packageAdjItemProvider = new PackageAdjItemProvider(this);
		}

		return packageAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ClassAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassAdjItemProvider classAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ClassAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdjAdapter() {
		if (classAdjItemProvider == null) {
			classAdjItemProvider = new ClassAdjItemProvider(this);
		}

		return classAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ContainmentAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainmentAdjItemProvider containmentAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ContainmentAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainmentAdjAdapter() {
		if (containmentAdjItemProvider == null) {
			containmentAdjItemProvider = new ContainmentAdjItemProvider(this);
		}

		return containmentAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.SharingAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharingAdjItemProvider sharingAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.SharingAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharingAdjAdapter() {
		if (sharingAdjItemProvider == null) {
			sharingAdjItemProvider = new SharingAdjItemProvider(this);
		}

		return sharingAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.AssociationAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationAdjItemProvider associationAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.AssociationAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdjAdapter() {
		if (associationAdjItemProvider == null) {
			associationAdjItemProvider = new AssociationAdjItemProvider(this);
		}

		return associationAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.GeneralizationAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationAdjItemProvider generalizationAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.GeneralizationAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdjAdapter() {
		if (generalizationAdjItemProvider == null) {
			generalizationAdjItemProvider = new GeneralizationAdjItemProvider(this);
		}

		return generalizationAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.AttributeAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeAdjItemProvider attributeAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.AttributeAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdjAdapter() {
		if (attributeAdjItemProvider == null) {
			attributeAdjItemProvider = new AttributeAdjItemProvider(this);
		}

		return attributeAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.MethodAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodAdjItemProvider methodAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.MethodAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdjAdapter() {
		if (methodAdjItemProvider == null) {
			methodAdjItemProvider = new MethodAdjItemProvider(this);
		}

		return methodAdjItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstractmodel.ParameterAdj} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterAdjItemProvider parameterAdjItemProvider;

	/**
	 * This creates an adapter for a {@link abstractmodel.ParameterAdj}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdjAdapter() {
		if (parameterAdjItemProvider == null) {
			parameterAdjItemProvider = new ParameterAdjItemProvider(this);
		}

		return parameterAdjItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryAbstractItemProvider != null) modelFactoryAbstractItemProvider.dispose();
		if (projectAdjItemProvider != null) projectAdjItemProvider.dispose();
		if (classTypeFactoryAdjItemProvider != null) classTypeFactoryAdjItemProvider.dispose();
		if (classTypeAdjItemProvider != null) classTypeAdjItemProvider.dispose();
		if (attributeTypeFactoryAdjItemProvider != null) attributeTypeFactoryAdjItemProvider.dispose();
		if (attributeTypeAdjItemProvider != null) attributeTypeAdjItemProvider.dispose();
		if (packageAdjItemProvider != null) packageAdjItemProvider.dispose();
		if (classAdjItemProvider != null) classAdjItemProvider.dispose();
		if (containmentAdjItemProvider != null) containmentAdjItemProvider.dispose();
		if (sharingAdjItemProvider != null) sharingAdjItemProvider.dispose();
		if (associationAdjItemProvider != null) associationAdjItemProvider.dispose();
		if (generalizationAdjItemProvider != null) generalizationAdjItemProvider.dispose();
		if (attributeAdjItemProvider != null) attributeAdjItemProvider.dispose();
		if (methodAdjItemProvider != null) methodAdjItemProvider.dispose();
		if (parameterAdjItemProvider != null) parameterAdjItemProvider.dispose();
	}

}
