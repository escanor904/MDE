	/*
 * 
 */
package concretemodel.diagram.edit.policies;

/**
 * @generated
 */
public class ClassConcreteAdjItemSemanticEditPolicy extends concretemodel.diagram.edit.policies.ConcretemodelBaseItemSemanticEditPolicy {

		/**
 * @generated
 */
	public ClassConcreteAdjItemSemanticEditPolicy() {
				super(concretemodel.diagram.providers.ConcretemodelElementTypes.ClassConcreteAdj_2002);
	}

	
	/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand cmd = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(getEditingDomain(), null);
	cmd.setTransactionNestingEnabled(false);
		for (java.util.Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge incomingLink = (org.eclipse.gmf.runtime.notation.Edge) it.next();
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.ContainmentSdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.ContainmentSdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.SharingAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.SharingAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.AssociationAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.AssociationAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.GeneralizationAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(incomingLink) == concretemodel.diagram.edit.parts.GeneralizationAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
	}
	for (java.util.Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge outgoingLink = (org.eclipse.gmf.runtime.notation.Edge) it.next();
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.ContainmentSdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.ContainmentSdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.SharingAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.SharingAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.AssociationAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.AssociationAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.GeneralizationAdjEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
		if (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(outgoingLink) == concretemodel.diagram.edit.parts.GeneralizationAdj2EditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
	}
	org.eclipse.emf.ecore.EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
	if (annotation == null) {
		// there are indirectly referenced children, need extra commands: false
		addDestroyChildNodesCommand(cmd);
		addDestroyShortcutsCommand(cmd, view);
		// delete host element
		cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(req));
	} else {
		cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), view));
	}
	return getGEFWrapper(cmd.reduce());
}
			
	/**
 * @generated
 */
	private void addDestroyChildNodesCommand(org.eclipse.gmf.runtime.common.core.command.ICompositeCommand cmd) {
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
		for (java.util.Iterator<?> nit = view.getChildren().iterator(); nit.hasNext();) {
			org.eclipse.gmf.runtime.notation.Node node = (org.eclipse.gmf.runtime.notation.Node) nit.next();
			switch (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(node)) {
									case concretemodel.diagram.edit.parts.ClassConcreteAdjClassConcreteAdjLstAttributeConcreteAdjCompartmentEditPart.VISUAL_ID:
				for (java.util.Iterator<?> cit = node.getChildren().iterator(); cit.hasNext();) {
					org.eclipse.gmf.runtime.notation.Node cnode = (org.eclipse.gmf.runtime.notation.Node) cit.next();
					switch (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(cnode)) {
					case concretemodel.diagram.edit.parts.AttributeConcreteAdjEditPart.VISUAL_ID:
		cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(getEditingDomain(), cnode.getElement(), false))); // directlyOwned: true
	// don't need explicit deletion of cnode as parent's view deletion would clean child views as well 
	// cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), cnode));
	break;
					}
				}
				break;
						case concretemodel.diagram.edit.parts.ClassConcreteAdjClassConcreteAdjLstMethodConcreteAdjCompartmentEditPart.VISUAL_ID:
				for (java.util.Iterator<?> cit = node.getChildren().iterator(); cit.hasNext();) {
					org.eclipse.gmf.runtime.notation.Node cnode = (org.eclipse.gmf.runtime.notation.Node) cit.next();
					switch (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(cnode)) {
					case concretemodel.diagram.edit.parts.MethodConcreteAdjEditPart.VISUAL_ID:
		cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(getEditingDomain(), cnode.getElement(), false))); // directlyOwned: true
	// don't need explicit deletion of cnode as parent's view deletion would clean child views as well 
	// cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), cnode));
	break;
					}
				}
				break;
						}
		}
	}
					
/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	org.eclipse.gef.commands.Command command = req.getTarget() == null ?
			getStartCreateRelationshipCommand(req) : getCompleteCreateRelationshipCommand(req);
	return command != null ? command : super.getCreateRelationshipCommand(req);
}

/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getStartCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	if (concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4001 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4002 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4003 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4004 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4005 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4006 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4007 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4008 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
	return null;
}

/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getCompleteCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	if (concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4001 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4002 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4003 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4004 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4005 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4006 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4007 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdjCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4008 == req.getElementType()) {
		return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdj2CreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
	return null;
}
				
/**
 * Returns command to reorient EClass based link. New link target or source
 * should be the domain model element associated with this node.
 * 
 * @generated
 */
protected org.eclipse.gef.commands.Command getReorientRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest req) {
	switch (getVisualID(req)) {
	case concretemodel.diagram.edit.parts.ContainmentSdjEditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdjReorientCommand(req));
case concretemodel.diagram.edit.parts.ContainmentSdj2EditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.ContainmentSdj2ReorientCommand(req));
case concretemodel.diagram.edit.parts.SharingAdjEditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdjReorientCommand(req));
case concretemodel.diagram.edit.parts.SharingAdj2EditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.SharingAdj2ReorientCommand(req));
case concretemodel.diagram.edit.parts.AssociationAdjEditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdjReorientCommand(req));
case concretemodel.diagram.edit.parts.AssociationAdj2EditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.AssociationAdj2ReorientCommand(req));
case concretemodel.diagram.edit.parts.GeneralizationAdjEditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdjReorientCommand(req));
case concretemodel.diagram.edit.parts.GeneralizationAdj2EditPart.VISUAL_ID:
	return getGEFWrapper(new concretemodel.diagram.edit.commands.GeneralizationAdj2ReorientCommand(req));
	}
	return super.getReorientRelationshipCommand(req);
}
		
	}
