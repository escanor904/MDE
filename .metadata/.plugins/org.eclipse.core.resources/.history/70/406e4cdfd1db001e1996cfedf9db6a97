	/*
 * 
 */
package concretemodel.diagram.navigator;

	/**
 * @generated
 */
public class ConcretemodelNavigatorItem extends concretemodel.diagram.navigator.ConcretemodelAbstractNavigatorItem {

		/**
 * @generated
 */
static {
	final Class[] supportedTypes = new Class[] { org.eclipse.gmf.runtime.notation.View.class, org.eclipse.emf.ecore.EObject.class };
	org.eclipse.core.runtime.Platform.getAdapterManager().registerAdapters(new org.eclipse.core.runtime.IAdapterFactory() {
		
		public Object getAdapter(Object adaptableObject, Class adapterType) {
			if (adaptableObject instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorItem && (adapterType == org.eclipse.gmf.runtime.notation.View.class || adapterType == org.eclipse.emf.ecore.EObject.class)) {
				return ((concretemodel.diagram.navigator.ConcretemodelNavigatorItem) adaptableObject).getView();
			}
			return null;
		}

		public Class[] getAdapterList() {
			return supportedTypes;
		}
	}, concretemodel.diagram.navigator.ConcretemodelNavigatorItem.class);
}
	
		/**
 * @generated
 */
private org.eclipse.gmf.runtime.notation.View myView;
	
	/**
 * @generated
 */
private boolean myLeaf = false;	
	
		/**
 * @generated
 */
public ConcretemodelNavigatorItem(org.eclipse.gmf.runtime.notation.View view, Object parent, boolean isLeaf) {
	super(parent);
	myView = view;
	myLeaf = isLeaf;
}
	
		/**
 * @generated
 */
public org.eclipse.gmf.runtime.notation.View getView() {
	return myView;
}
	
		/**
 * @generated
 */
public boolean isLeaf() {
	return myLeaf;
}

		/**
 * @generated
 */
public boolean equals(Object obj) {
	if (obj instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorItem) {
		return org.eclipse.emf.ecore.util.EcoreUtil.getURI(getView()).equals(org.eclipse.emf.ecore.util.EcoreUtil.getURI(((concretemodel.diagram.navigator.ConcretemodelNavigatorItem) obj).getView()));
	}
	return super.equals(obj);
}
	
		/**
 * @generated
 */
public int hashCode() {
	return org.eclipse.emf.ecore.util.EcoreUtil.getURI(getView()).hashCode();
}

	}
