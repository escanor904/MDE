	/*
 * 
 */
package concretemodel.diagram.navigator;

/**
 * @generated
 */
public class ConcretemodelNavigatorLabelProvider extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.ui.navigator.ICommonLabelProvider, org.eclipse.jface.viewers.ITreePathLabelProvider {

		/**
 * @generated
 */
static {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
public void updateLabel(org.eclipse.jface.viewers.ViewerLabel label, org.eclipse.jface.viewers.TreePath elementPath) {
	Object element = elementPath.getLastSegment();
	if (element instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorItem && !isOwnView(((concretemodel.diagram.navigator.ConcretemodelNavigatorItem) element).getView())) {
		return;
	}
	label.setText(getText(element));
	label.setImage(getImage(element));
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(Object element) {
	if (element instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorGroup) {
	concretemodel.diagram.navigator.ConcretemodelNavigatorGroup group = (concretemodel.diagram.navigator.ConcretemodelNavigatorGroup) element;
	return concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
}

	if (element instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorItem) {
	concretemodel.diagram.navigator.ConcretemodelNavigatorItem navigatorItem = (concretemodel.diagram.navigator.ConcretemodelNavigatorItem) element;
	if (!isOwnView(navigatorItem.getView())) {
		return super.getImage(element);
	}
	return getImage(navigatorItem.getView());
}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getImage(view);
	}
}

		return super.getImage(element);
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(org.eclipse.gmf.runtime.notation.View view) {
		switch (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(view)) {
		case concretemodel.diagram.edit.parts.ClassDiagramAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Diagram?http://concretemodel?ClassDiagramAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.ClassDiagramAdj_1000); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.PackageConcreteAdjEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?http://concretemodel?PackageConcreteAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.PackageConcreteAdj_2001); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.ClassConcreteAdjEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?http://concretemodel?ClassConcreteAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.ClassConcreteAdj_2002); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.AttributeConcreteAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Node?http://concretemodel?AttributeConcreteAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.AttributeConcreteAdj_3001); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.MethodConcreteAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Node?http://concretemodel?MethodConcreteAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.MethodConcreteAdj_3002); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.ContainmentSdjEditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?ContainmentSdj", concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4001); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.ContainmentSdj2EditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?ContainmentSdj", concretemodel.diagram.providers.ConcretemodelElementTypes.ContainmentSdj_4002); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.SharingAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?SharingAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4003); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.SharingAdj2EditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?SharingAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.SharingAdj_4004); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.AssociationAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?AssociationAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4005); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.AssociationAdj2EditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?AssociationAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.AssociationAdj_4006); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.GeneralizationAdjEditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?GeneralizationAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4007); //$NON-NLS-1$
case concretemodel.diagram.edit.parts.GeneralizationAdj2EditPart.VISUAL_ID:
	return getImage("Navigator?Link?http://concretemodel?GeneralizationAdj", concretemodel.diagram.providers.ConcretemodelElementTypes.GeneralizationAdj_4008); //$NON-NLS-1$
	}
		return getImage("Navigator?UnknownElement", null);  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
private org.eclipse.swt.graphics.Image getImage(String key, org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	org.eclipse.jface.resource.ImageRegistry imageRegistry = concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().getImageRegistry();
	org.eclipse.swt.graphics.Image image = imageRegistry.get(key);
	if (image == null && elementType != null && concretemodel.diagram.providers.ConcretemodelElementTypes.isKnownElementType(elementType)) {
		image = concretemodel.diagram.providers.ConcretemodelElementTypes.getImage(elementType);
		imageRegistry.put(key, image);
	}
			
	if (image == null) {
		image = imageRegistry.get("Navigator?ImageNotFound");  //$NON-NLS-1$
		imageRegistry.put(key, image);
	}
	return image;
}
	
		/**
 * @generated
 */
public String getText(Object element) {
	if (element instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorGroup) {
	concretemodel.diagram.navigator.ConcretemodelNavigatorGroup group = (concretemodel.diagram.navigator.ConcretemodelNavigatorGroup) element;
	return group.getGroupName();
}

	if (element instanceof concretemodel.diagram.navigator.ConcretemodelNavigatorItem) {
	concretemodel.diagram.navigator.ConcretemodelNavigatorItem navigatorItem = (concretemodel.diagram.navigator.ConcretemodelNavigatorItem) element;
   		if (!isOwnView(navigatorItem.getView())) {
   			return null;
   		}
   		return getText(navigatorItem.getView());
	}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getText(view);
	}
}

		return super.getText(element);
}
	
		/**
 * @generated
 */
public String getText(org.eclipse.gmf.runtime.notation.View view) {
	if (view.getElement() != null && view.getElement().eIsProxy()) {
		return getUnresolvedDomainElementProxyText(view);
	}
		switch (concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getVisualID(view)) {
		case concretemodel.diagram.edit.parts.ClassDiagramAdjEditPart.VISUAL_ID:
	return getClassDiagramAdj_1000Text(view);
case concretemodel.diagram.edit.parts.PackageConcreteAdjEditPart.VISUAL_ID:
	return getPackageConcreteAdj_2001Text(view);
case concretemodel.diagram.edit.parts.ClassConcreteAdjEditPart.VISUAL_ID:
	return getClassConcreteAdj_2002Text(view);
case concretemodel.diagram.edit.parts.AttributeConcreteAdjEditPart.VISUAL_ID:
	return getAttributeConcreteAdj_3001Text(view);
case concretemodel.diagram.edit.parts.MethodConcreteAdjEditPart.VISUAL_ID:
	return getMethodConcreteAdj_3002Text(view);
case concretemodel.diagram.edit.parts.ContainmentSdjEditPart.VISUAL_ID:
	return getContainmentSdj_4001Text(view);
case concretemodel.diagram.edit.parts.ContainmentSdj2EditPart.VISUAL_ID:
	return getContainmentSdj_4002Text(view);
case concretemodel.diagram.edit.parts.SharingAdjEditPart.VISUAL_ID:
	return getSharingAdj_4003Text(view);
case concretemodel.diagram.edit.parts.SharingAdj2EditPart.VISUAL_ID:
	return getSharingAdj_4004Text(view);
case concretemodel.diagram.edit.parts.AssociationAdjEditPart.VISUAL_ID:
	return getAssociationAdj_4005Text(view);
case concretemodel.diagram.edit.parts.AssociationAdj2EditPart.VISUAL_ID:
	return getAssociationAdj_4006Text(view);
case concretemodel.diagram.edit.parts.GeneralizationAdjEditPart.VISUAL_ID:
	return getGeneralizationAdj_4007Text(view);
case concretemodel.diagram.edit.parts.GeneralizationAdj2EditPart.VISUAL_ID:
	return getGeneralizationAdj_4008Text(view);
	}
		return getUnknownElementText(view);
}
	
		/**
 * @generated
 */
private String getClassDiagramAdj_1000Text(org.eclipse.gmf.runtime.notation.View view) {
			concretemodel.ClassDiagramAdj domainModelElement = (concretemodel.ClassDiagramAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getName();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 1000);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getPackageConcreteAdj_2001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = concretemodel.diagram.providers.ConcretemodelParserProvider.getParser(concretemodel.diagram.providers.ConcretemodelElementTypes.PackageConcreteAdj_2001, view.getElement() != null ? view.getElement() : view, concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getType(concretemodel.diagram.edit.parts.PackageConcreteAdjNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getClassConcreteAdj_2002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = concretemodel.diagram.providers.ConcretemodelParserProvider.getParser(concretemodel.diagram.providers.ConcretemodelElementTypes.ClassConcreteAdj_2002, view.getElement() != null ? view.getElement() : view, concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getType(concretemodel.diagram.edit.parts.ClassConcreteAdjNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getAttributeConcreteAdj_3001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = concretemodel.diagram.providers.ConcretemodelParserProvider.getParser(concretemodel.diagram.providers.ConcretemodelElementTypes.AttributeConcreteAdj_3001, view.getElement() != null ? view.getElement() : view, concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getType(concretemodel.diagram.edit.parts.AttributeConcreteAdjNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getMethodConcreteAdj_3002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = concretemodel.diagram.providers.ConcretemodelParserProvider.getParser(concretemodel.diagram.providers.ConcretemodelElementTypes.MethodConcreteAdj_3002, view.getElement() != null ? view.getElement() : view, concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getType(concretemodel.diagram.edit.parts.MethodConcreteAdjMethodNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getContainmentSdj_4001Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.ContainmentSdj domainModelElement = (concretemodel.ContainmentSdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4001);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getContainmentSdj_4002Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.ContainmentSdj domainModelElement = (concretemodel.ContainmentSdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4002);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getSharingAdj_4003Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.SharingAdj domainModelElement = (concretemodel.SharingAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4003);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getSharingAdj_4004Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.SharingAdj domainModelElement = (concretemodel.SharingAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4004);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getAssociationAdj_4005Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.AssociationAdj domainModelElement = (concretemodel.AssociationAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4005);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getAssociationAdj_4006Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.AssociationAdj domainModelElement = (concretemodel.AssociationAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4006);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getGeneralizationAdj_4007Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.GeneralizationAdj domainModelElement = (concretemodel.GeneralizationAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4007);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	/**
 * @generated
 */
private String getGeneralizationAdj_4008Text(org.eclipse.gmf.runtime.notation.View view) {
						concretemodel.GeneralizationAdj domainModelElement = (concretemodel.GeneralizationAdj) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getRoleTarget();
} else {
	concretemodel.diagram.part.ConcretemodelDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4008);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	
		/**
 * @generated
 */
private String getUnknownElementText(org.eclipse.gmf.runtime.notation.View view) {
	return "<UnknownElement Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
private String getUnresolvedDomainElementProxyText(org.eclipse.gmf.runtime.notation.View view) {
	return "<Unresolved domain element Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}

		/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

		/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
	
		/**
 * @generated
 */
public String getDescription(Object anElement) {
	return null;
}
	
		/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return concretemodel.diagram.edit.parts.ClassDiagramAdjEditPart.MODEL_ID.equals(concretemodel.diagram.part.ConcretemodelVisualIDRegistry.getModelID(view));
}

	}
